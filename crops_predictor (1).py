# -*- coding: utf-8 -*-
"""Crops_Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ublMue2aCt8-UGlIptde_jMWYPExHKox
"""

#importing data

import pandas as pd
import numpy as np

crop = pd.read_excel("https://github.com/shreyas023/HackX/raw/main/Crop_prediction.xlsx")

#exploring data

crop.head()

crop.describe()

crop.columns

crop.shape

crop.isnull().sum()

crop.nunique()

crop.corr()

crop.info()

#preprocessing the data

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

crop['Region'] = le.fit_transform(crop['Region'])
crop['WeatherCondition'] = le.fit_transform(crop['WeatherCondition'])
crop['Bulk Nutrient'] = le.fit_transform(crop['Bulk Nutrient'])
crop['SeedQuality'] = le.fit_transform(crop['SeedQuality'])
crop['Crop Cultivation'] = le.fit_transform(crop['Crop_Cultivation'])

crop.head(10)

#visualising data

import matplotlib.pyplot as plt
import seaborn as sns

sns.pairplot(crop)
plt.show()

plt.figure(figsize=(10,10))
sns.heatmap(crop.corr(),annot=True,cmap="YlGnBu")
plt.show

#train test split

X = crop.drop(['Crop_Cultivation','Crop Cultivation','Irrigation Method'],axis=1)
y1 = crop['Crop_Cultivation']
y2 = crop['Irrigation Method']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y1,random_state=1,test_size=0.2)

X_train.shape,X_test.shape,y_train.shape,y_test.shape

#training

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()

model.fit(X_train,y_train)

#testing

y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score,classification_report

acc1 = accuracy_score(y_test,y_pred)

print(classification_report(y_test,y_pred))

#predicting

crop.iloc[[25]]

res1 = model.predict(X.iloc[[25]])

X1_train, X1_test, y1_train, y1_test = train_test_split(X,y2,random_state=1,test_size=0.2)

X1_train.shape,X1_test.shape,y1_train.shape,y1_test.shape

model.fit(X1_train,y1_train)

y1_pred = model.predict(X1_test)

acc2 = accuracy_score(y1_test,y1_pred)

print(classification_report(y1_test,y1_pred))

crop.iloc[[25]]

res2 = model.predict(X.iloc[[25]])

#conclusion

print("Suggested Cultivation :",res1)
print("Suggested Irrigation :",res2)

average = (acc1+acc2)/2
print("Accuracy of model = ",average*100,"%")